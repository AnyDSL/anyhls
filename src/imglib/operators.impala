type Operator = fn(Img, Img) -> ();

fn @make_read_2d(width: i32, read: Read) -> Read2d {
    |x, y| { read(y * width + x) }
}

fn make_point_op(vect_factor: int, op: StencilOp) -> Operator {
    @ |arr_im, out_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out = make_img_mem1d(out_im, vect_factor);
        for idx in pipeline(1, 0, arr.height * arr.stride / vect_factor) {
            arr.get(idx);
            for i in unroll(0, arr.vect_factor) {
              out.write(i, op(make_read_2d(0, arr.read), i, 0));
            }
            out.set(idx);
        }
    }
}
