fn img_init_zero(arr: Img) -> () {
    init_zero(bitcast[&mut[pixel_t]](arr.buf.data), arr.stride, arr.height)
}

fn img_init_rand(arr: Img) -> () {
    init_rand(bitcast[&mut[pixel_t]](arr.buf.data), arr.stride, arr.height)
}

fn @display_image(arr : Img, roi_x : i32, roi_y : i32) -> () {
    let width  = 10;
    let height = 10;
    let upper_x = roi_x + width;
    let upper_y = roi_y + height;

    print_string("@(x = ");
    print_i32(roi_x);
    print_string(", ");
    print_string("y = ");
    print_i32(roi_y);
    print_string(")\n");
    for y in range(roi_y, upper_y) {
        for x in range(roi_x, upper_x) {
            let pixel = img_read2d(arr, x, y);
            print_pixel(pixel);
            print_string("\t\t");
        }
        print_string("\n");
    }
}

fn @check(arr: Img, out: Img, f: fn(i32, i32) -> bool ) -> i32 {
    // test
    let mut passed = 0;
    for y in range(0, arr.height) {
        for x in range(0, arr.width) {
            if f(x, y) == true { passed++; }
            if passed == 1 {
                print_string("Failed at (x, y) = (");
                print_i32(x); print_string(", "); print_i32(y); print_string(")\n");
            }
        }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        print_string("Test FAILED!\n");
        print_string("input image: \n");
        display_image(arr, 0, 0);
        print_string("output image: \n");
        display_image(out, 0, 0);
    }
    passed
}

fn @check_with_ref(arr: Img, out: Img, f: fn(i32, i32) -> pixel_t, roi_disp: (i32, i32), offset: (i32, i32)) -> i32 {
    // ref image
    let ref_im = create_host_img(arr.width, arr.height, 1);
    let (offset_x, offset_y) = offset;

    // test
    let mut passed = 0;
    let EPS = 0.02 as pixel_t;
    for y in range(offset_y, arr.height - 2 * offset_y) {
        for x in range(offset_x, arr.width - 2 * offset_x) {
            let res = img_read2d(out, x, y);
            let ref = f(x, y);
            img_write2d(ref_im, x, y, ref);

            let mut err = ref - res;
            if err < 0.0 as pixel_t { err = -err; }
            if err > EPS  { passed++; }

            if passed == 1 {
                print_string("Failed at (x, y) = (");
                print_i32(x); print_string(", "); print_i32(y); print_string(")\n");
                print_string("(ref, res) = (");
                print_pixel(ref); print_string(", "); print_pixel(res); print_string(")\n");
                passed ++;
            }
        }
    }
    if passed == 0 {
        print_string("Test PASSED!\n");
    } else {
        let (disp_x, disp_y) = roi_disp;
        print_string("Test FAILED!\n");
        print_string("Number of Incorrect Results: "); print_i32(passed-1); print_string(")\n");
        print_string("input image: \n");
        display_image(arr, disp_x, disp_y);
        print_string("ref image: \n");
        display_image(ref_im, disp_x, disp_y);
        print_string("output image: \n");
        display_image(out, disp_x, disp_y);
    }
    passed
}
