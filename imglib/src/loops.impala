type Loop = fn(i32, i32, fn(i32) -> ()) -> ();

type UnrOp = fn(i32) -> ();
type BinOp = fn(i32, i32) -> ();
type Datapath = fn(Read2d, Write2d, StencilOp) -> BinOp;


// --------------------------------------
//          Binary Operators
// --------------------------------------
fn @par(factor_x: i32, factor_y: i32, f: BinOp) -> () {
    for j in unroll(0, factor_y) {
        for i in unroll(0, factor_x) {
            f(i, j)
        }
    }
}

fn @vec(factor_x: i32, f: UnrOp) -> () {
    for i, j in par(factor_x, 1) {
        f(i)
    };
}


// --------------------------------------
//             Loop types
// --------------------------------------
// range
fn pipeline_range(ii:i32) -> Loop {
    @ |lower, upper, body| pipeline(ii, lower, upper, body)
}

//fn @pipeline_range_step(ii: i32, lower: i32, upper: i32, step: i32, body: fn(i32) -> ()) -> () {
//    let mut gidx = 0;
//    for idx in pipeline(ii, lower, upper / step) {
//        body(gidx);
//        gidx = gidx + step;
//    }
//}


// --------------------------------------
//    Software (Functional) Pipelining
// --------------------------------------
fn make_loop_pipeline(loop: Loop, delay: i32, at_read: fn(i32) -> (), at_write: fn(i32) -> ()) -> Loop {
    @ |lower, upper, body: fn(i32) -> ()| {
        let offs = lower + delay;
        for idx in loop(lower, upper + delay) {
            with if_check(delay != 0, idx < upper) { at_read(idx) }

            body(idx);

            with if_check(delay != 0, (idx > offs - 1)) { at_write(idx - offs) }
        }
    }
}

// helper functions
fn @if_check(cond: bool, check: bool, body: fn() ->()) -> () {
    if(cond == false ) { body() } else { if(check) { body() } }
}
