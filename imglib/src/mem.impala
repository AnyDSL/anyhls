struct Mem1D {
    read    : fn(i32) -> pixel_t,
    write   : fn(i32, pixel_t) -> (),
    get     : fn(i32) -> (), // update for read
    set     : fn(i32) -> (), // update for write
    height  : i32,
    width   : i32,
    stride  : i32, // (width / vect_factor)
    vect_factor : i32
}

struct Mem2D {
    read    : fn(i32, i32) -> pixel_t,
    write   : fn(i32, i32, pixel_t) -> (),
    get     : fn(i32, i32) -> (), // update for read
    set     : fn(i32, i32) -> (), // update for write
    height  : i32,
    width   : i32,
    stride  : i32, // (width / vect_factor)
    vect_factor : i32
}

// API
fn @img_to_mem1d(img: Img, vect_factor: i32, get: fn(i32) -> (), set: fn(i32) -> (), read: fn(i32) -> pixel_t, write: fn(i32, pixel_t) -> ()) -> Mem1D {
    let stride = round_up(img.stride, vect_factor) / vect_factor;
    Mem1D{ read: read, write: write, get: get, set: set, height: img.height, width: img.width, stride: stride, vect_factor: vect_factor}
}

fn @img_to_mem2d(img: Img, vect_factor: i32, get: fn(i32, i32) -> (), set: fn(i32, i32) -> (), read: fn(i32, i32) -> pixel_t, write: fn(i32, i32, pixel_t) -> ()) -> Mem2D {
    let stride = round_up(img.stride, vect_factor) / vect_factor;
    Mem2D{ read: read, write: write, get: get, set: set, height: img.height, width: img.width, stride: stride, vect_factor: vect_factor}
}

fn @make_img_rand_mem1d(img: Img) -> Mem1D {
    img_to_mem1d(img, 1, |_|{}, |_|{}, @|idx: i32| { img_read(img, idx) }, @|idx: i32, v: pixel_t| { img_write(img, idx, v) })
}

fn @make_img_rand_mem2d(img: Img) -> Mem2D {
    let mut x_get = 0; let mut y_get = 0;
    let mut x_set = 0; let mut y_set = 0;
    let get = @|x: i32, y: i32| { x_get = x; y_get = y; };
    let set = @|x: i32, y: i32| { x_set = x; y_set = y; };
    let read = @|x: i32, y: i32| { img_read2d(img, x_get + x, y_get + y) };
    let write = |x: i32, y: i32, v: pixel_t| { img_write2d(img, x_set + x, y_set + y, v) };
    img_to_mem2d(img, 1, get, set, read, write)
}

fn @make_img_mem1d(img: Img, vect_factor: i32) -> Mem1D {
    match vect_factor {
         1 => make_img_mem_vec1 (img),
         2 => make_img_mem_vec2 (img),
         4 => make_img_mem_vec4 (img),
         8 => make_img_mem_vec8 (img),
        16 => make_img_mem_vec16(img),
        32 => make_img_mem_vec32(img),
         _ => undef[Mem1D]()
    }
}

// helper functions
fn @make_img_mem_vec1(img: Img) -> Mem1D {
    let mut value = 0 as pixel_t;
    fn @get(idx: i32) -> () { value = get_img_read(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value }
    fn @write(idx: i32, din: pixel_t) -> () { value = din; }
    img_to_mem1d(img, 1, get, set, read, write)
}

fn @make_img_mem_vec2(img: Img) -> Mem1D {
    let mut value = [ 0 as pixel_t, .. 2 ];
    fn @get(idx: i32) -> () { value = get_img_read_vec2(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write_vec2(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    img_to_mem1d(img, 2, get, set, read, write)
}

fn @make_img_mem_vec4(img: Img) -> Mem1D {
    let mut value = [ 0 as pixel_t, .. 4 ];
    fn @get(idx: i32) -> () { value = get_img_read_vec4(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write_vec4(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    img_to_mem1d(img, 4, get, set, read, write)
}

fn @make_img_mem_vec8(img: Img) -> Mem1D {
    let mut value = [ 0 as pixel_t, .. 8 ];
    fn @get(idx: i32) -> () { value = get_img_read_vec8(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write_vec8(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    img_to_mem1d(img, 8, get, set, read, write)
}

fn @make_img_mem_vec16(img: Img) -> Mem1D {
    let mut value = [ 0 as pixel_t, .. 16 ];
    fn @get(idx: i32) -> () { value = get_img_read_vec16(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write_vec16(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    img_to_mem1d(img, 16, get, set, read, write)
}

fn @make_img_mem_vec32(img: Img) -> Mem1D {
    let mut value = [ 0 as pixel_t, .. 32 ];
    fn @get(idx: i32) -> () { value = get_img_read_vec32(img)(idx); }
    fn @set(idx: i32) -> () { get_img_write_vec32(img)(idx, value); }
    fn @read(idx: i32) -> pixel_t { value(idx) }
    fn @write(idx: i32, din: pixel_t) -> () { value(idx) = din; }
    img_to_mem1d(img, 32, get, set, read, write)
}
