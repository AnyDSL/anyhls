static coarsening_policy = FetchAndCalc_nobh;
type Operator = fn(Img, Img) -> ();
type Operator3 = fn(Img, Img, Img) -> ();
type Operator4 = fn(Img, Img, Img, Img) -> ();

type PointOp = fn(pixel_t) -> pixel_t;
type PointOp2to1 = fn(pixel_t, pixel_t) -> pixel_t;
type PointOp3to1 = fn(pixel_t, pixel_t, pixel_t) -> pixel_t;

struct OperatorSchedule {
    read  : fn(i32, i32) -> pixel_t,
    write : fn(i32, i32, pixel_t) -> (),
    at    : fn(i32, BinOp) -> (),
    delay : i32
}

fn make_point_op(vect_factor: int, op: PointOp) -> Operator {
    @ |arr_im, out_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out = make_img_mem1d(out_im, vect_factor);
        for idx in pipeline(1, 0, arr.height * arr.stride) {
            arr.get(idx);
            for i in unroll(0, vect_factor) {
              out.write(i, op(arr.read(i)))
            }
            out.set(idx);
        }
    }
}

fn make_point_op2to1(vect_factor: int, op: PointOp2to1) -> Operator3 {
    @ |arr0_im, arr1_im, out_im| {
        let arr0 = make_img_mem1d(arr0_im, vect_factor);
        let arr1 = make_img_mem1d(arr1_im, vect_factor);
        let out  = make_img_mem1d(out_im, vect_factor);
        for idx in pipeline(1, 0, arr0.height * arr1.stride) {
            arr0.get(idx);
            arr1.get(idx);
            for i in unroll(0, vect_factor) {
                out.write(i, op(arr0.read(i), arr1.read(i)))
            }
            out.set(idx);
        }
    }
}

fn make_point_op3to1(vect_factor: int, op: PointOp3to1) -> Operator4 {
    @ |arr0_im, arr1_im, arr2_im, out_im| {
        let arr0 = make_img_mem1d(arr0_im, vect_factor);
        let arr1 = make_img_mem1d(arr1_im, vect_factor);
        let arr2 = make_img_mem1d(arr2_im, vect_factor);
        let out  = make_img_mem1d(out_im, vect_factor);
        for idx in pipeline(1, 0, arr0.height * arr0.stride) {
            arr0.get(idx);
            arr1.get(idx);
            arr2.get(idx);
            for i in unroll(0, vect_factor) {
                out.write(i, op(arr0.read(i), arr1.read(i), arr2.read(i)))
            }
            out.set(idx);
        }
    }
}

fn make_point_op1to2(vect_factor: int, op: PointOp) -> Operator3 {
    @ |arr_im, out0_im, out1_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out0 = make_img_mem1d(out0_im, vect_factor);
        let out1 = make_img_mem1d(out1_im, vect_factor);
        for idx in pipeline(1, 0, arr.height * arr.stride) {
            arr.get(idx);
            for i in unroll(0, vect_factor) {
                let res = op(arr.read(i));
                out0.write(i, res);
                out1.write(i, res);
            }
            out0.set(idx);
            out1.set(idx);
        }
    }
}

fn make_local_op(vect_factor: int, stencil: Stencil, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> Operator {
    @ |arr_im, out_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out = make_img_mem1d(out_im, vect_factor);

        let comp = make_local_schedule(arr, out, stencil.extents, vect_factor, bh_lower, bh_upper);
        let loop = make_loop_pipeline(pipeline_range(1), comp.delay, arr.get, out.set);

        for idx in loop(0, arr.height * arr.stride) {
            for i, j in comp.at(idx) {
                comp.write(i, j, stencil.op(comp.read, i, j))
            }
        }
    }
}

fn @make_local_schedule(arr: Mem1D, out: Mem1D, extents: Extents, vect_factor: i32, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> OperatorSchedule {
    let local_schedule = coarsening_policy;
    local_schedule(arr, out, extents, vect_factor, bh_lower, bh_upper)
}

fn @FetchAndCalc_nobh(arr: Mem1D, out: Mem1D, extents: Extents, vect_factor: i32, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> OperatorSchedule {
    let lbuf_width = arr.stride;
    let win_height = extents.y * 2 + 1;

    let delay_lbuf = lbuf_width * extents.y; // initial delay from line buffer
    let delay_swin = round_up(extents.x, vect_factor) / vect_factor; // initial delay from sliding window
    let swin_width = extents.x + (1 + delay_swin) * vect_factor;

    let lbuf = (make_linebuf2d(lbuf_width, win_height, vect_factor))(arr.read);
    let swin = (make_sliding_window(swin_width, win_height, vect_factor))(lbuf.read);

    let mut col = 0;
    let shift = @|| {
          lbuf.shift($col, 0); // read addr from lbuf1Ds (col < lbuf.lbuf_width, row = 0)
          swin.shift(0, 0);   // read addr from lbuf2D
          col++;
          if col == lbuf_width { col = 0; }
    };

    OperatorSchedule {
        delay: delay_lbuf + delay_swin,
        read:  @|i:i32, j:i32| { swin.read(extents.x + i, extents.y + j) },
        write: @|i:i32, j:i32, val:pixel_t| { out.write(i, val) },
        at: @|idx: i32, body: BinOp| {
            shift();
            for i, j in par(vect_factor, 1) { @@body(i, j) };
        }
    }
}


fn @FetchAndCalc(arr: Mem1D, out: Mem1D, extents: Extents, vect_factor: i32, bh_lower: BoundaryFn, bh_upper: BoundaryFn) -> OperatorSchedule {
    let lbuf_stride = arr.stride;
    let win_height = extents.y * 2 + 1;

    let delay_lbuf = lbuf_stride * extents.y; // initial delay from line buffer
    let delay_swin = round_up(extents.x, vect_factor) / vect_factor; // initial delay from sliding window
    let swin_stride = extents.x + (1 + delay_swin) * vect_factor;
    let swin_width = 2 * extents.x + vect_factor;

    // border handling row selection
    let input_row_schedule = LoopCircular {
        interv: Interval1d {start: extents.y,   end: arr.height + extents.y + 1}, // loop index
        roi  : RoI1d       {  o_x: extents.y, width: arr.height},                 // image region
        vect_factor: 1
    };
    let win_row_bounds = new_bounds(0, extents.y, extents.y + 1, win_height);
    let row_sel_fun = get_type0_row_sel(input_row_schedule, win_row_bounds);

    // On Chip Memory Architecture
    let lbuf = (make_linebuf2d(lbuf_stride, win_height, vect_factor))(arr.read);
    let swin = (make_sliding_window_bh(swin_stride, win_height, vect_factor, row_sel_fun, bh_lower, bh_upper))(lbuf.read);

    // border handling col selection
    let input_col_schedule = LoopCircular {
        interv: Interval1d { start: 0,         end: vect_factor * arr.stride }, // loop index
        roi  :      RoI1d  { o_x: extents.x, width: arr.width },  // image region
        vect_factor : vect_factor
    };
    let right_padding = (vect_factor * arr.stride) - arr.width;
    let win_col_bounds = new_bounds(0, extents.x, extents.x + vect_factor - right_padding, swin_width);
    let col_sel = new_type0_col_selection(swin.read, win_height, input_col_schedule, win_col_bounds, bh_lower, bh_upper);

    let mut col = 0;
    let mut row = 0;
    let shift = || {
          lbuf.shift($col, 0);    // read addr from lbuf1Ds (col < lbuf.lbuf_stride, row = 0)
          swin.shift(0, $row);    // read addr from lbuf2D
          col_sel.update($col);
          col++;
          if col == lbuf_stride { col = 0; row++; }
    };

    OperatorSchedule {
        delay: delay_lbuf + delay_swin,
        read:  @|i:i32, j:i32| { col_sel.read(extents.x + i, extents.y + j) },
        write: @|i:i32, j:i32, val:pixel_t| { out.write(i, val) },
        at: @|idx: i32, body: BinOp| {
            shift();
            for i, j in par(vect_factor, 1) { @@body(i, j) };
        }
    }
}
