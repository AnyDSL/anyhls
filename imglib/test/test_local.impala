type pixel_t = i32;
static use_hls = false;

fn @print_pixel(val: pixel_t) -> () { print_i32(val) };


// loop pipelining: yes
// vectorized mem acces: no
// onchip-mem: none,
fn make_local_naive(vect_factor: int, stencil: Stencil) -> Operator {
    @ |arr, out| {
        let read = get_img_read2d(arr);
        for y in pipeline(1, 0, arr.height) {
            for x in range_step(0, arr.width, vect_factor) {
                for i in unroll(0, vect_factor) {
                    img_write2d(out, x + i, y, stencil.op(read, x + i, y));
                }
            }
        }
    }
}

fn make_local_simple(vect_factor: int, stencil: Stencil) -> Operator {
    @ |arr_im, out_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out = make_img_mem1d(out_im, vect_factor);

        let mask_height = stencil.extents.y * 2 + 1;

        let delay_lbuf = arr.stride * stencil.extents.y; // initial delay from line buffer
        let lbuf = (make_linebuf2d(arr.stride, mask_height, vect_factor))(arr.read);

        let delay_swin = round_up(stencil.extents.x, vect_factor) / vect_factor; // initial delay from sliding window
        let swin_width = stencil.extents.x + (1 + delay_swin) * vect_factor;
        let swin = (make_sliding_window(swin_width, mask_height, vect_factor))(lbuf.read);

        let delay = delay_lbuf + delay_swin;

        let mut col = 0;
        for idx in pipeline(1, 0, arr.height * arr.stride + delay) {
            if (idx < arr.height * arr.stride) {
                arr.get(idx);   // read addr from image
            }
            lbuf.shift(col, 0); // read addr from lbuf1Ds (col < lbuf.width, row = 0)
            swin.shift(0, 0);   // read addr from lbuf2D

            for i in unroll(0, vect_factor) {
                out.write(i, stencil.op(swin.read, stencil.extents.x + i, stencil.extents.y));
            }

            col++;
            if col == arr.stride { col = 0; }

            if (idx > delay - 1) { out.set(idx - delay); }
        }
    }
}

fn @make_local(vect_factor: int, stencil: Stencil) -> Operator {
    @ |arr_im, out_im| {
        let arr = make_img_mem1d(arr_im, vect_factor);
        let out = make_img_mem1d(out_im, vect_factor);

        let extents = stencil.extents;
        let lbuf_width = arr.stride;
        let win_height = extents.y * 2 + 1;

        let delay_lbuf = lbuf_width * extents.y; // initial delay from line buffer
        let delay_swin = round_up(extents.x, vect_factor) / vect_factor; // initial delay from sliding window
        let swin_width = extents.x + (1 + delay_swin) * vect_factor;

        let lbuf = (make_linebuf2d(lbuf_width, win_height, vect_factor))(arr.read);
        let swin = (make_sliding_window(swin_width, win_height, vect_factor))(lbuf.read);

        let mut col = 0;
        let shift = || {
              lbuf.shift(col, 0); // read addr from lbuf1Ds (col < lbuf.lbuf_width, row = 0)
              swin.shift(0, 0);   // read addr from lbuf2D
              col++;
              if col == lbuf_width { col = 0; }
        };

        let comp = OperatorSchedule {
            delay: delay_lbuf + delay_swin,
            read:  @|i:i32, j:i32| { swin.read(extents.x + i, extents.y + j) },
            write: @|i:i32, j:i32, val:pixel_t| { out.write(i, val) },
            at: @|idx: i32, body: BinOp| {
                shift();
                for i, j in par(vect_factor, 1) { body(i, j) };
            }
        };

        let loop = make_loop_pipeline(pipeline_range(1), comp.delay, arr.get, out.set);

        for idx in loop(0, arr.height * arr.stride) {
            for i, j in comp.at(idx) {
                comp.write(i, j, stencil.op(comp.read, i, j))
            }
        }
    }
}


fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    let fpga = get_fpga_backend(use_hls);

    let vect_factor = 4;
    let arr = create_host_img(width, height, vect_factor);
    let out = create_host_img(width, height, vect_factor);
    for i in range(0, size_img(arr)) {
        img_write(arr, i, i as pixel_t);
        img_write(out, i, 0 as pixel_t);
    }

    let filter = stencil(@|read, x, y| {
        (1 * read(x, y - 1) + 4 * read(x, y - 1) + 7 * read(x + 1, y - 1) +
         2 * read(x, y    ) + 5 * read(x, y    ) + 8 * read(x + 1, y    ) +
         3 * read(x, y + 1) + 6 * read(x, y + 1) + 9 * read(x + 1, y + 1)) / 25}, extents(1, 1));

    //let operator = make_local_naive(vect_factor, filter);
    //let operator = make_local_simple(vect_factor, filter);
    let operator = make_local(vect_factor, filter);
    compute(fpga, arr, out, operator);

    let roi_disp = (0, 0); // (width - 10, height - 10)
    let offset = (1, 1);
    let passed = check_with_ref(arr, out, |x, y| {filter.op(get_img_read2d(arr), x, y)}, roi_disp, offset);

    release_img(arr);
    release_img(out);

    if passed >= 256 { 255 } else { passed }
}
