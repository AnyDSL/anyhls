static use_hls = false;

type pixel_t = i32;
fn @print_pixel(val: pixel_t) -> () { print_i32(val) };

fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    let fpga = get_fpga_backend(use_hls);

    let vect_factor = 4;
    let arr = create_host_img(width, height, vect_factor);
    let out = create_host_img(width, height, vect_factor);
    for i in range(0, size_img(arr)) {
        img_write(arr, i, i as pixel_t);
        img_write(out, i, 0 as pixel_t);
    }

    let scale = @|pix: pixel_t| { 2 * pix };

    let operator = make_point_op(vect_factor, scale);
    host2host(fpga, arr, out, operator);

    let passed = check(arr, out,
        |x, y| {img_read2d(out, x, y) != scale(img_read2d(arr, x, y))});

    release_img(arr);
    release_img(out);

    if passed >= 256 { 255 } else { passed }
}
