static use_hls = false;

type pixel_t = i32;
fn @print_pixel(val: pixel_t) -> () { print_i32(val) };

fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    let fpga = get_fpga_backend(use_hls);

    let vect_factor = 1;
    let arr = create_host_img(width, height, vect_factor);
    let out = create_host_img(width, height, vect_factor);
    img_init_zero(out);
    img_init_rand(arr);

    let jacobi_a = 2;
    let jacobi_b = 10 - 4 * jacobi_a;
    let diff_treshold = 0;
    let mask = get_mask3([[0 as pixel_t, jacobi_b, 0 as pixel_t],
                          [    jacobi_b, jacobi_a, jacobi_b    ],
                          [0 as pixel_t, jacobi_b, 0 as pixel_t]]);

    let filter = get_stencil(mask);

    let lower = clamp_lower;
    let upper = clamp_upper;
    let operator = make_local_op(vect_factor, filter, lower, upper);

    for benchmark_host(num_host_iter) {
        host2host(fpga, arr, out, operator);
    }
    print_total_timing();

    let roi_disp = (0, 0);
    let offset = (0, 0);
    let passed = check_with_ref(arr, out, |x, y| {filter.op(get_img_read2d_bh(arr, lower, upper), x, y)}, roi_disp, offset);

    release_img(arr);
    release_img(out);

    if passed >= 256 { 255 } else { passed }
}
