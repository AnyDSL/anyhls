type pixel_t = i32;
type channel = channel_i32;
static use_hls = false;

fn @print_pixel(val: pixel_t) -> () { print_i32(val) };

fn main() -> i32 {
    let width  = 1024;
    let height = 1024;

    let fpga = get_fpga_backend(use_hls);

    let vect_factor = 1;
    let arr = create_host_img(width, height, vect_factor);
    let out = create_host_img(width, height, vect_factor);
    img_init_zero(out);
    img_init_rand(arr);

    let filter = stencil(@|read, x, y| {(
        1 * read(x-2, y-2) +  4 * read(x-1, y-2) +  6 * read(x, y-1) +  4 * read(x+1, y-2) + 1 * read(x-2, y-2) +
        4 * read(x-2, y-1) + 16 * read(x-1, y-1) + 24 * read(x, y-1) + 16 * read(x+1, y-1) + 4 * read(x-2, y-1) +
        6 * read(x-2, y  ) + 24 * read(x-1, y  ) + 36 * read(x, y  ) + 24 * read(x+1, y  ) + 6 * read(x-2, y  ) +
        4 * read(x-2, y+1) + 16 * read(x-1, y+1) + 24 * read(x, y+1) + 16 * read(x+1, y+1) + 4 * read(x-2, y+1) +
        1 * read(x-2, y+2) +  4 * read(x-1, y+2) +  6 * read(x, y+1) +  4 * read(x+1, y+2) + 1 * read(x-2, y+2) ) << 8}, extents(2, 2));

    let lower = mirror_lower;
    let upper = mirror_upper;
    //let lower = wrap_const_fun(const_lower, 0 as pixel_t);
    //let upper = wrap_const_fun(const_upper, 0 as pixel_t);

    let operator = make_local_op(vect_factor, filter, lower, upper);
    for benchmark_host(num_host_iter) {
        host2host(fpga, arr, out, operator);
    }
    print_total_timing();

    let roi_disp = (0, 0);
    let offset = (0, 0);
    let passed = check_with_ref(arr, out, |x, y| {filter.op(get_img_read2d_bh(arr, lower, upper), x, y)}, roi_disp, offset);

    release_img(arr);
    release_img(out);

    if passed >= 256 { 255 } else { passed }
}
